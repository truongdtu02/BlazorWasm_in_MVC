@using FFmpegBlazor
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime Runtime

<InputFile OnChange="fileLoad" />
<br />
<h3>@step</h3>

<br />
<h3>InitFFmpeg : @(first ? "No" : "Yes")</h3>

<br />
<audio controls src="@url" />
<br />
<br />
<button class="btn btn-primary" @onclick="Process">Convert Mp3</button>
<br />
<br />
<audio controls src="@url2" />
<br />
<br />
<h3>Progress @progress %</h3>

@code
{
    //[Parameter]
    //public IJSRuntime Runtime{get; set;}
    string step;
    float progress;
    string url; string url2;
    FFMPEG ff;
    byte[] buffer;
    const int maxLeng = 100000000; //100MB
    private bool first = true;

    protected override async Task OnInitializedAsync()
    {
        if (FFmpegFactory.Runtime == null)
        {
            //FFmpegFactory.Logger += WriteLogs;
            //FFmpegFactory.Progress += ProgressChange;
            //FFmpegFactory.Progress += ProgressShow;
        }

        //initialize Library
        //await FFmpegFactory.Init(Runtime);
    }

    async void fileLoad(InputFileChangeEventArgs v)
    {
        if (first)
        {
            first = false;
            await FFmpegFactory.Init(Runtime);
        }
        //get fist file from input selection
        var file = v.GetMultipleFiles()[0];

        //udStep("1");

        //read all bytes
        using var stream = file.OpenReadStream(maxLeng); //Max size for file that can be read
        buffer = new byte[file.Size];

        //udStep("2");


        //read all bytes
        await stream.ReadAsync(buffer);

        //udStep("3");


        //create a video link from buffer so that video can be played
        url = FFmpegFactory.CreateURLFromBuffer(buffer, "myFile.mp3", file.ContentType);

        //udStep("4");


        //reRender DOM
        StateHasChanged();
    }

    public void udStep(string inStep)
    {
        step = inStep;
        StateHasChanged();
    }

    async void Process()
    {
        //create an instance
        ff = FFmpegFactory.CreateFFmpeg(new FFmpegConfig() { Log = false });

        udStep("1");

        ////download all dependencies from cdn
        await ff.Load();

        udStep("2");

        //if (!ff.IsLoaded) return;

        //udStep("3");

        ////write buffer to in-memory files (special emscripten files, Ffmpeg only interact with this file)
        ////ff.WriteFile("myFile.mp4", buffer);
        //ff.WriteFile("myFile.mp3", buffer);

        //udStep("4");

        ////Pass CLI argument here equivalent to ffmpeg -i myFile.mp4 output.mp3
        ////await ff.Run("-i", "myFile.mp4", "output.mp3");
        ////-codec:a libmp3lame -b:a 48k –ac 1 -ar  24000
        //await ff.Run("-i", "myFile.mp3", "-b:a", "48k", "-ac", "1", "-ar", "24000", "output.mp3");

        //udStep("5");

        //delete in-memory file
        //ff.UnlinkFile("myFile.mp4");
    }

    async void ProgressChange(Progress m)
    {
        // display progress % (0-1)
        Console.WriteLine($"Progress {m.Ratio}");

        if (m.Ratio == 1)
        {
            //get bytepointer from c wasm to c#
            var res = await ff.ReadFile("output.mp3");


            //generate a url from file bufferPointer
            url2 = FFmpegFactory.CreateURLFromBuffer(res, "output.mp3", "audio/mp3");

            //Download the file instantly

            //FFmpegFactory.DownloadBufferAsFile(res, "output.mp3", "audio/mp3");

        }
        progress = (float)m.Ratio * 100;
        StateHasChanged();
    }
    void WriteLogs(Logs m)
    {
        Console.WriteLine(m.Type + " " + m.Message);
    }
}
